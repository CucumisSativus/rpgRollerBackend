/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.AddActorsToCombatParameters
import io.swagger.client.model.CombatPresenter
import io.swagger.client.model.CreateCombatParameters
import io.swagger.client.model.RemoveActorsFromCombatParameters
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class CombatApi(val defBasePath: String = "http://0.0.0.0:8080",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Add actors to combat
   * 
   * @param actorIds list of actor ids to be added 
   * @param combatId combat id 
   * @return CombatPresenter
   */
  def addActorsToCombat(actorIds: AddActorsToCombatParameters, combatId: String): Option[CombatPresenter] = {
    // create path and map variables
    val path = "/combat/{combatId}/add-actors".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "combatId" + "\\}",apiInvoker.escape(combatId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (actorIds == null) throw new Exception("Missing required parameter 'actorIds' when calling CombatApi->addActorsToCombat")

    if (combatId == null) throw new Exception("Missing required parameter 'combatId' when calling CombatApi->addActorsToCombat")

    

    var postBody: AnyRef = actorIds

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PATCH", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[CombatPresenter]).asInstanceOf[CombatPresenter])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Create new combat
   * 
   * @param combat combat parameters 
   * @return CombatPresenter
   */
  def addCombat(combat: CreateCombatParameters): Option[CombatPresenter] = {
    // create path and map variables
    val path = "/combat".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (combat == null) throw new Exception("Missing required parameter 'combat' when calling CombatApi->addCombat")

    

    var postBody: AnyRef = combat

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[CombatPresenter]).asInstanceOf[CombatPresenter])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Remove actors from combat
   * 
   * @param combat list of actor ids to be removed 
   * @param combatId combat id 
   * @return CombatPresenter
   */
  def removeActorsFromCombat(combat: RemoveActorsFromCombatParameters, combatId: String): Option[CombatPresenter] = {
    // create path and map variables
    val path = "/combat/{combatId}/remove-actors".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "combatId" + "\\}",apiInvoker.escape(combatId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (combat == null) throw new Exception("Missing required parameter 'combat' when calling CombatApi->removeActorsFromCombat")

    if (combatId == null) throw new Exception("Missing required parameter 'combatId' when calling CombatApi->removeActorsFromCombat")

    

    var postBody: AnyRef = combat

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PATCH", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[CombatPresenter]).asInstanceOf[CombatPresenter])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
